/* eslint-disable no-new */
import { JsonFile, JsonPatch, TextFile, typescript } from 'projen';
import { NodePackageManager } from 'projen/lib/javascript';

const CURRENT_NODE_VERSION = '16.9.0';

export const DEFAULT_PROJEN_CONFIG: typescript.TypeScriptProjectOptions = {
   name: 'My Project',
   description: 'A project generated by @silvermine/projen.',
   defaultReleaseBranch: 'master',
   packageManager: NodePackageManager.NPM,
   projenrcTs: true,
   minNodeVersion: CURRENT_NODE_VERSION,
   maxNodeVersion: CURRENT_NODE_VERSION,
   githubOptions: {
      mergify: false,
   },
   jest: false,
   depsUpgrade: false,
};

export class SilvermineProject extends typescript.TypeScriptProject {
   public constructor(options: typescript.TypeScriptProjectOptions) {
      super({
         ...DEFAULT_PROJEN_CONFIG,
         ...options,
      });

      /**
       * Dependencies need to be overridden after the initial constructor initialization:
       * https://projen.io/deps.html#overriding-dependency-specifications
       */
      const devDependencies = [
         '@silvermine/chai-strictly-equal@1.1.0',
         '@silvermine/eslint-config@git+https://github.com/silvermine/eslint-config-silvermine#fa9925f9de6b8139d42781dbd002b4024318744a',
         '@silvermine/eslint-plugin-silvermine@2.4.0',
         '@silvermine/standardization@2.0.0',
         '@silvermine/typescript-config@git+https://github.com/silvermine/typescript-config#23213e33077089e723629dead5342abe6f3b3c8c',
         '@types/chai@4.1.7',
         '@types/mocha@5.2.5',
         '@types/node@12.20.45',
         '@types/sinon@5.0.5',
         '@typescript-eslint/eslint-plugin@5.17.0',
         '@typescript-eslint/parser@5.17.0',
         'chai@4.2.0',
         'check-node-version@4.0.2',
         'coveralls@3.0.9',
         'eslint@8.16.0',
         'mocha@5.2.0',
         'nyc@13.1.0',
         'sinon@5.1.1',
         'source-map-support@0.5.16',
         'ts-node@7.0.1',
         'tslib@1.9.3',
         'typescript@3.9.5',
      ];

      devDependencies.forEach((dependency) => {
         this.addDevDeps(dependency);
      });

      /**
       * Remove some default github actions configs
       */
      this.tryRemoveFile('.github/workflows/upgrade-master.yml');
      this.tryRemoveFile('.github/workflows/release.yml');

      /**
       * Patches for default GitHub actions commands
       */
      const githubBuildWorkflow = this.tryFindObjectFile(
         '.github/workflows/build.yml'
      );

      githubBuildWorkflow?.patch(JsonPatch.add('/on/push', {}));
      githubBuildWorkflow?.patch(
         JsonPatch.replace('/jobs/build/steps/3/run', 'npm run build')
      );
      githubBuildWorkflow?.patch(
         JsonPatch.add('/jobs/build/steps/3', {
            name: 'standards',
            run: 'npm run standards',
         })
      );
      githubBuildWorkflow?.patch(
         JsonPatch.add('/jobs/build/steps/4', {
            name: 'test',
            run: 'npm test',
         })
      );

      // Put this after the build to detect if someone changed any of the projen config.
      // That would be naughty.
      githubBuildWorkflow?.patch(
         JsonPatch.add('/jobs/build/steps/6', {
            name: 'projen',
            run: 'npx projen',
         })
      );

      this.addGitIgnore('!/package-lock.json');

      this.tryRemoveFile('.eslintrc.json');

      // This is a TextFile instead of a JsonFile because otherwise Projen
      // will attempt to inject a comment line into the config object,
      // which breaks ESlint.
      new TextFile(this, '.eslintrc.json', {
         lines: [
            '{',
            '   "root": true,',
            '   "extends": "@silvermine/eslint-config/node",',
            '   "ignorePatterns": [ "lib/**/*" ]',
            '}',
         ],
      });

     new TextFile(this, '.mocha.opts', {
       lines: [
         '--require source-map-support/register',
         '--require ./test/setup/before.ts',
         '--full-trace',
         '--bail',
         'test/**/*.test.ts',
       ],
     });

     new JsonFile(this, '.nycrc.json', {
       obj: {
         'include': [
           'src/**/*.{ts,js}',
         ],
         'exclude': [
           '**/*.d.ts',
         ],
         'extension': [
           '.ts',
           '.js',
         ],
         'require': [
           'ts-node/register',
         ],
         'reporter': [
           'text-summary',
           'html',
           'lcov',
         ],
         'sourceMap': true,
         'all': true,
       },
     });

     new TextFile(this, 'test/tsconfig.json', {
       lines: [
         '{',
         '   "extends": "@silvermine/typescript-config/tsconfig.json"',
         '}',
       ],
     });

     new TextFile(this, 'src/tsconfig.commonjs.json', {
       lines: [
         '{',
         '   "extends": "@silvermine/typescript-config/tsconfig.commonjs.json",',
         '   "compilerOptions": {',
         '      "outDir": "../dist/commonjs/"',
         '   }',
         '}',
       ],
     });

     new TextFile(this, 'src/tsconfig.esm.json', {
       lines: [
         '{',
         '   "extends": "@silvermine/typescript-config/tsconfig.esm.json",',
         '   "compilerOptions": {',
         '      "outDir": "../dist/esm/"',
         '   }',
         '}',
       ],
     });

     new TextFile(this, 'src/tsconfig.types.json', {
       lines: [
         '{',
         '   "extends": "@silvermine/typescript-config/tsconfig.types.json",',
         '   "compilerOptions": {',
         '      "outDir": "../dist/types/"',
         '   }',
         '}',
       ],
     });
   }

}
